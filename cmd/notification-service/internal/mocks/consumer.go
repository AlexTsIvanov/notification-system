// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	factory "github.com/AlexTsIvanov/notification-system/cmd/notification-service/internal/factory"
	types "github.com/AlexTsIvanov/notification-system/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockReader) Ack(event types.EventContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockReaderMockRecorder) Ack(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockReader)(nil).Ack), event)
}

// Nack mocks base method.
func (m *MockReader) Nack(event types.EventContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockReaderMockRecorder) Nack(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockReader)(nil).Nack), event)
}

// Read mocks base method.
func (m *MockReader) Read(ctx context.Context) (types.EventContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(types.EventContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), ctx)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetSender mocks base method.
func (m *MockFactory) GetSender(channel string) (factory.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSender", channel)
	ret0, _ := ret[0].(factory.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSender indicates an expected call of GetSender.
func (mr *MockFactoryMockRecorder) GetSender(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSender", reflect.TypeOf((*MockFactory)(nil).GetSender), channel)
}
